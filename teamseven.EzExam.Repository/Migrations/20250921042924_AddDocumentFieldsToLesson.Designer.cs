// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using teamseven.EzExam.Repository.Context;

#nullable disable

namespace teamseven.EzExam.Repository.Migrations
{
    [DbContext(typeof(teamsevenezexamdbContext))]
    [Migration("20250921042924_AddDocumentFieldsToLesson")]
    partial class AddDocumentFieldsToLesson
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerKey")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("AnswerKey");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Explanation")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("Explanation");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsCorrect");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("Order");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("QuestionId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_answers");

                    b.HasIndex(new[] { "IsCorrect" }, "ix_answers_is_correct");

                    b.HasIndex(new[] { "QuestionId" }, "ix_answers_question_id");

                    b.ToTable("answers", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Name");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("Order");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer")
                        .HasColumnName("SemesterId");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("SubjectId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_chapters");

                    b.HasIndex(new[] { "SemesterId" }, "ix_chapters_semester_id");

                    b.HasIndex(new[] { "SubjectId" }, "ix_chapters_subject_id");

                    b.ToTable("chapters", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Chatbot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BotResponse")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("BotResponse");

                    b.Property<string>("Context")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Context");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsHelpful")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsHelpful");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("TEXT")
                        .HasColumnName("MessageType");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("QuestionId");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("SubjectId");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.Property<string>("UserMessage")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("UserMessage");

                    b.HasKey("Id")
                        .HasName("pk_chatbots");

                    b.HasIndex(new[] { "CreatedAt" }, "ix_chatbots_created_at");

                    b.HasIndex(new[] { "QuestionId" }, "ix_chatbots_question_id");

                    b.HasIndex(new[] { "SubjectId" }, "ix_chatbots_subject_id");

                    b.HasIndex(new[] { "UserId" }, "ix_chatbots_user_id");

                    b.ToTable("chatbots", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.DifficultyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("Level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_difficulty_levels");

                    b.HasIndex(new[] { "Code" }, "uq_difficulty_levels_code")
                        .IsUnique();

                    b.ToTable("difficulty_levels", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("CreatedByUserId");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Description");

                    b.Property<int>("ExamTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("ExamTypeId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsPublic");

                    b.Property<int?>("LessonId")
                        .HasColumnType("integer")
                        .HasColumnName("LessonId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Name");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("SubjectId");

                    b.Property<int>("TimeLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(60)
                        .HasColumnName("TimeLimit");

                    b.Property<int>("TotalMarks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(100)
                        .HasColumnName("TotalMarks");

                    b.Property<int>("TotalQuestions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("TotalQuestions");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_exams");

                    b.HasIndex("ChapterId");

                    b.HasIndex(new[] { "CreatedByUserId" }, "ix_exams_created_by_user_id");

                    b.HasIndex(new[] { "ExamTypeId" }, "ix_exams_exam_type_id");

                    b.HasIndex(new[] { "IsActive" }, "ix_exams_is_active");

                    b.HasIndex(new[] { "IsDeleted" }, "ix_exams_is_deleted");

                    b.HasIndex(new[] { "IsPublic" }, "ix_exams_is_public");

                    b.HasIndex(new[] { "LessonId" }, "ix_exams_lesson_id");

                    b.HasIndex(new[] { "SubjectId" }, "ix_exams_subject_id");

                    b.ToTable("exams", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.ExamHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Action");

                    b.Property<int>("ActionByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("ActionByUserId");

                    b.Property<DateTime>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ActionDate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Description");

                    b.Property<int>("ExamId")
                        .HasColumnType("integer")
                        .HasColumnName("ExamId");

                    b.HasKey("Id")
                        .HasName("pk_exam_histories");

                    b.HasIndex(new[] { "ActionByUserId" }, "ix_exam_histories_action_by_user_id");

                    b.HasIndex(new[] { "ExamId" }, "ix_exam_histories_exam_id");

                    b.ToTable("exam_histories", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.ExamQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ExamId")
                        .HasColumnType("integer")
                        .HasColumnName("ExamId");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("QuestionId");

                    b.HasKey("Id")
                        .HasName("pk_exam_questions");

                    b.HasIndex(new[] { "ExamId" }, "ix_exam_questions_exam_id");

                    b.HasIndex(new[] { "QuestionId" }, "ix_exam_questions_question_id");

                    b.ToTable("exam_questions", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.ExamType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_exam_types");

                    b.HasIndex(new[] { "Name" }, "uq_exam_types_name")
                        .IsUnique();

                    b.ToTable("exam_types", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_grades");

                    b.HasIndex(new[] { "Name" }, "uq_grades_name")
                        .IsUnique();

                    b.ToTable("grades", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("integer")
                        .HasColumnName("ChapterId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Document")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("Document");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DocumentType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_lessons");

                    b.HasIndex(new[] { "ChapterId" }, "ix_lessons_chapter_id");

                    b.ToTable("lessons", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("AverageRating");

                    b.Property<int?>("ChapterId")
                        .HasColumnType("integer")
                        .HasColumnName("ChapterId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("CreatedByUserId");

                    b.Property<int>("DifficultyLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("DifficultyLevelId");

                    b.Property<string>("Image")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("Image");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsCloned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsCloned");

                    b.Property<int?>("LessonId")
                        .HasColumnType("integer")
                        .HasColumnName("LessonId");

                    b.Property<string>("QuestionSource")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("QuestionSource");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("MULTIPLE_CHOICE")
                        .HasColumnName("QuestionType");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("SubjectId");

                    b.Property<int?>("TemplateQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("TemplateQuestionId");

                    b.Property<int?>("TextbookId")
                        .HasColumnType("integer")
                        .HasColumnName("TextbookId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("ViewCount");

                    b.HasKey("Id")
                        .HasName("pk_questions");

                    b.HasIndex(new[] { "ChapterId" }, "ix_questions_chapter_id");

                    b.HasIndex(new[] { "CreatedByUserId" }, "ix_questions_created_by_user_id");

                    b.HasIndex(new[] { "DifficultyLevelId" }, "ix_questions_difficulty_level_id");

                    b.HasIndex(new[] { "IsActive" }, "ix_questions_is_active");

                    b.HasIndex(new[] { "LessonId" }, "ix_questions_lesson_id");

                    b.HasIndex(new[] { "QuestionType" }, "ix_questions_question_type");

                    b.HasIndex(new[] { "SubjectId" }, "ix_questions_subject_id");

                    b.HasIndex(new[] { "TemplateQuestionId" }, "ix_questions_template_question_id");

                    b.HasIndex(new[] { "TextbookId" }, "ix_questions_textbook_id");

                    b.ToTable("questions", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.QuestionComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsApproved");

                    b.Property<bool>("IsHelpful")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsHelpful");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("integer")
                        .HasColumnName("ParentCommentId");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("QuestionId");

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("Rating");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("pk_question_comments");

                    b.HasIndex(new[] { "IsApproved" }, "ix_question_comments_is_approved");

                    b.HasIndex(new[] { "ParentCommentId" }, "ix_question_comments_parent_comment_id");

                    b.HasIndex(new[] { "QuestionId" }, "ix_question_comments_question_id");

                    b.HasIndex(new[] { "UserId" }, "ix_question_comments_user_id");

                    b.ToTable("question_comments", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.QuestionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsHandled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsHandled");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("QuestionId");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Reason");

                    b.Property<DateTime>("ReportDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ReportDate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ReportedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("ReportedByUserId");

                    b.HasKey("Id")
                        .HasName("pk_question_reports");

                    b.HasIndex(new[] { "QuestionId" }, "ix_question_reports_question_id");

                    b.HasIndex(new[] { "ReportedByUserId" }, "ix_question_reports_reported_by_user_id");

                    b.ToTable("question_reports", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("RoleName");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex(new[] { "RoleName" }, "uq_roles_role_name")
                        .IsUnique();

                    b.ToTable("roles", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GradeId")
                        .HasColumnType("integer")
                        .HasColumnName("GradeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_semesters");

                    b.HasIndex(new[] { "GradeId" }, "ix_semesters_grade_id");

                    b.ToTable("semesters", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("CreatedByUserId");

                    b.Property<string>("Explanation")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("Explanation");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsApproved");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsMp4Generated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsMp4Generated");

                    b.Property<bool>("IsMp4Reused")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsMp4Reused");

                    b.Property<string>("Mp4Url")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Mp4Url");

                    b.Property<int?>("OriginalSolutionId")
                        .HasColumnType("integer")
                        .HasColumnName("OriginalSolutionId");

                    b.Property<string>("PythonScript")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("PythonScript");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("QuestionId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("VideoContentType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("VideoContentType");

                    b.Property<byte[]>("VideoData")
                        .HasColumnType("bytea")
                        .HasColumnName("VideoData");

                    b.HasKey("Id")
                        .HasName("pk_solutions");

                    b.HasIndex(new[] { "CreatedByUserId" }, "ix_solutions_created_by_user_id");

                    b.HasIndex(new[] { "OriginalSolutionId" }, "ix_solutions_original_solution_id");

                    b.HasIndex(new[] { "QuestionId" }, "ix_solutions_question_id");

                    b.ToTable("solutions", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.SolutionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Reason");

                    b.Property<DateTime>("ReportDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ReportDate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ReportedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("ReportedByUserId");

                    b.Property<int>("SolutionId")
                        .HasColumnType("integer")
                        .HasColumnName("SolutionId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("Status");

                    b.HasKey("Id")
                        .HasName("pk_solution_reports");

                    b.HasIndex(new[] { "ReportedByUserId" }, "ix_solution_reports_reported_by_user_id");

                    b.HasIndex(new[] { "SolutionId" }, "ix_solution_reports_solution_id");

                    b.ToTable("solution_reports", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_subjects");

                    b.HasIndex(new[] { "Code" }, "uq_subjects_code")
                        .IsUnique();

                    b.ToTable("subjects", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.SubscriptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Description");

                    b.Property<string>("Features")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("Features");

                    b.Property<bool>("IsAIEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsAIEnabled");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<int>("MaxAIRequests")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("MaxAIRequests");

                    b.Property<int>("MaxSolutionViews")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("MaxSolutionViews");

                    b.Property<string>("SubscriptionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("SubscriptionCode");

                    b.Property<string>("SubscriptionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("SubscriptionName");

                    b.Property<decimal?>("SubscriptionPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("SubscriptionPrice");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id")
                        .HasName("pk_subscription_types");

                    b.HasIndex(new[] { "UpdatedBy" }, "ix_subscription_types_updated_by");

                    b.HasIndex(new[] { "SubscriptionCode" }, "uq_subscription_types_subscription_code")
                        .IsUnique();

                    b.ToTable("subscription_types", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.TextBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GradeId")
                        .HasColumnType("integer")
                        .HasColumnName("GradeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_textbooks");

                    b.HasIndex(new[] { "GradeId" }, "ix_textbooks_grade_id");

                    b.HasIndex(new[] { "Name", "GradeId" }, "uq_textbooks_name_grade")
                        .IsUnique();

                    b.ToTable("textbooks", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("AvatarUrl");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("Balance");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Email");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EmailVerifiedAt");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("FullName");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<bool?>("IsPremium")
                        .HasColumnType("boolean")
                        .HasColumnName("IsPremium");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastLoginAt");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("PhoneNumber");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("RoleId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex(new[] { "RoleId" }, "ix_users_role_id");

                    b.HasIndex(new[] { "UpdatedBy" }, "ix_users_updated_by");

                    b.HasIndex(new[] { "Email" }, "uq_users_email")
                        .IsUnique();

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.UserSocialProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Email");

                    b.Property<string>("ProfileUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("ProfileUrl");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ProviderId");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ProviderName");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("pk_user_social_providers");

                    b.HasIndex(new[] { "UserId" }, "ix_user_social_providers_user_id");

                    b.HasIndex(new[] { "ProviderName", "ProviderId" }, "uq_user_social_providers_provider")
                        .IsUnique();

                    b.ToTable("user_social_providers", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.UserSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("Amount");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EndDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<string>("PaymentGatewayTransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("PaymentGatewayTransactionId");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("PaymentStatus");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StartDate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("SubscriptionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("SubscriptionTypeId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("pk_user_subscriptions");

                    b.HasIndex(new[] { "SubscriptionTypeId" }, "ix_user_subscriptions_subscription_type_id");

                    b.HasIndex(new[] { "UserId" }, "ix_user_subscriptions_user_id");

                    b.ToTable("user_subscriptions", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.UserUsageHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Description");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("ResourceId");

                    b.Property<string>("ResourceType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ResourceType");

                    b.Property<string>("UsageType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("UsageType");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("pk_user_usage_history");

                    b.HasIndex(new[] { "CreatedAt" }, "ix_user_usage_history_created_at");

                    b.HasIndex(new[] { "UsageType" }, "ix_user_usage_history_usage_type");

                    b.HasIndex(new[] { "UserId" }, "ix_user_usage_history_user_id");

                    b.ToTable("user_usage_history", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.UserUsageTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ResetDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ResetDate");

                    b.Property<int>("SubscriptionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("SubscriptionTypeId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("UsageCount");

                    b.Property<string>("UsageType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("UsageType");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("pk_user_usage_tracking");

                    b.HasIndex(new[] { "ResetDate" }, "ix_user_usage_tracking_reset_date");

                    b.HasIndex(new[] { "SubscriptionTypeId" }, "ix_user_usage_tracking_subscription_type_id");

                    b.HasIndex(new[] { "UsageType" }, "ix_user_usage_tracking_usage_type");

                    b.HasIndex(new[] { "UserId" }, "ix_user_usage_tracking_user_id");

                    b.ToTable("user_usage_tracking", "public");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Answer", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answers_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Chapter", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.Semester", "Semester")
                        .WithMany("Chapters")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chapters_semester_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.Subject", "Subject")
                        .WithMany("Chapters")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chapters_subject_id");

                    b.Navigation("Semester");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Chatbot", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.Question", "Question")
                        .WithMany("Chatbots")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_chatbots_question_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.Subject", "Subject")
                        .WithMany("Chatbots")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_chatbots_subject_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.User", "User")
                        .WithMany("Chatbots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chatbots_user_id");

                    b.Navigation("Question");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Exam", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.Chapter", null)
                        .WithMany("Exams")
                        .HasForeignKey("ChapterId");

                    b.HasOne("teamseven.EzExam.Repository.Models.User", "CreatedByUser")
                        .WithMany("Exams")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exams_created_by_user_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.ExamType", "ExamType")
                        .WithMany("Exams")
                        .HasForeignKey("ExamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exams_exam_type_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.Lesson", "Lesson")
                        .WithMany("Exams")
                        .HasForeignKey("LessonId")
                        .HasConstraintName("fk_exams_lesson_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exams_subject_id");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ExamType");

                    b.Navigation("Lesson");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.ExamHistory", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.User", "ActionByUser")
                        .WithMany("ExamHistories")
                        .HasForeignKey("ActionByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_histories_action_by_user_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.Exam", "Exam")
                        .WithMany("ExamHistories")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_histories_exam_id");

                    b.Navigation("ActionByUser");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.ExamQuestion", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_questions_exam_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.Question", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_questions_question_id");

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Lesson", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.Chapter", "Chapter")
                        .WithMany("Lessons")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lessons_chapter_id");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Question", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.Chapter", "Chapter")
                        .WithMany("Questions")
                        .HasForeignKey("ChapterId")
                        .HasConstraintName("fk_questions_chapter_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.User", "CreatedByUser")
                        .WithMany("Questions")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_questions_created_by_user_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.DifficultyLevel", "DifficultyLevel")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_questions_difficulty_level_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.Lesson", "Lesson")
                        .WithMany("Questions")
                        .HasForeignKey("LessonId")
                        .HasConstraintName("fk_questions_lesson_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_questions_subject_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.Question", "TemplateQuestion")
                        .WithMany("ClonedQuestions")
                        .HasForeignKey("TemplateQuestionId")
                        .HasConstraintName("fk_questions_template_question_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.TextBook", "Textbook")
                        .WithMany("Questions")
                        .HasForeignKey("TextbookId")
                        .HasConstraintName("fk_questions_textbook_id");

                    b.Navigation("Chapter");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DifficultyLevel");

                    b.Navigation("Lesson");

                    b.Navigation("Subject");

                    b.Navigation("TemplateQuestion");

                    b.Navigation("Textbook");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.QuestionComment", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.QuestionComment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("fk_question_comments_parent_comment_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.Question", "Question")
                        .WithMany("QuestionComments")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_comments_question_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.User", "User")
                        .WithMany("QuestionComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_comments_user_id");

                    b.Navigation("ParentComment");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.QuestionReport", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.Question", "Question")
                        .WithMany("QuestionReports")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_reports_question_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.User", "ReportedByUser")
                        .WithMany("QuestionReports")
                        .HasForeignKey("ReportedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_reports_reported_by_user_id");

                    b.Navigation("Question");

                    b.Navigation("ReportedByUser");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Semester", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.Grade", "Grade")
                        .WithMany("Semesters")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_semesters_grade_id");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Solution", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.User", "CreatedByUser")
                        .WithMany("Solutions")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_solutions_created_by_user_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.Solution", "OriginalSolution")
                        .WithMany("ReusedSolutions")
                        .HasForeignKey("OriginalSolutionId")
                        .HasConstraintName("fk_solutions_original_solution_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.Question", "Question")
                        .WithMany("Solutions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_solutions_question_id");

                    b.Navigation("CreatedByUser");

                    b.Navigation("OriginalSolution");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.SolutionReport", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.User", "ReportedByUser")
                        .WithMany("SolutionReports")
                        .HasForeignKey("ReportedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_solution_reports_reported_by_user_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.Solution", "Solution")
                        .WithMany("SolutionReports")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_solution_reports_solution_id");

                    b.Navigation("ReportedByUser");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.SubscriptionType", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.User", "UpdatedByNavigation")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_subscription_types_updated_by");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.TextBook", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.Grade", "Grade")
                        .WithMany("TextBooks")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_textbooks_grade_id");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.User", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_role_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.User", "UpdatedByNavigation")
                        .WithMany("InverseUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_users_updated_by");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.UserSocialProvider", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.User", "User")
                        .WithMany("UserSocialProviders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_social_providers_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.UserSubscription", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.SubscriptionType", "SubscriptionType")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_subscriptions_subscription_type_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.User", "User")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_subscriptions_user_id");

                    b.Navigation("SubscriptionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.UserUsageHistory", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.User", "User")
                        .WithMany("UserUsageHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_usage_history_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.UserUsageTracking", b =>
                {
                    b.HasOne("teamseven.EzExam.Repository.Models.SubscriptionType", "SubscriptionType")
                        .WithMany("UserUsageTrackings")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_usage_tracking_subscription_type_id");

                    b.HasOne("teamseven.EzExam.Repository.Models.User", "User")
                        .WithMany("UserUsageTrackings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_usage_tracking_user_id");

                    b.Navigation("SubscriptionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Chapter", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Lessons");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.DifficultyLevel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Exam", b =>
                {
                    b.Navigation("ExamHistories");

                    b.Navigation("ExamQuestions");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.ExamType", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Grade", b =>
                {
                    b.Navigation("Semesters");

                    b.Navigation("TextBooks");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Lesson", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Chatbots");

                    b.Navigation("ClonedQuestions");

                    b.Navigation("ExamQuestions");

                    b.Navigation("QuestionComments");

                    b.Navigation("QuestionReports");

                    b.Navigation("Solutions");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.QuestionComment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Semester", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Solution", b =>
                {
                    b.Navigation("ReusedSolutions");

                    b.Navigation("SolutionReports");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.Subject", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Chatbots");

                    b.Navigation("Exams");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.SubscriptionType", b =>
                {
                    b.Navigation("UserSubscriptions");

                    b.Navigation("UserUsageTrackings");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.TextBook", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("teamseven.EzExam.Repository.Models.User", b =>
                {
                    b.Navigation("Chatbots");

                    b.Navigation("ExamHistories");

                    b.Navigation("Exams");

                    b.Navigation("InverseUpdatedByNavigation");

                    b.Navigation("QuestionComments");

                    b.Navigation("QuestionReports");

                    b.Navigation("Questions");

                    b.Navigation("SolutionReports");

                    b.Navigation("Solutions");

                    b.Navigation("UserSocialProviders");

                    b.Navigation("UserSubscriptions");

                    b.Navigation("UserUsageHistories");

                    b.Navigation("UserUsageTrackings");
                });
#pragma warning restore 612, 618
        }
    }
}
