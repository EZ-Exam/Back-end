using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace teamseven.EzExam.Repository.Migrations
{
    /// <inheritdoc />
    public partial class AddCompleteTestSystemEntities : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_ai_test_recommendations_chapters_ChapterId",
                table: "ai_test_recommendations");

            migrationBuilder.DropForeignKey(
                name: "FK_ai_test_recommendations_exams_GeneratedExamId",
                table: "ai_test_recommendations");

            migrationBuilder.DropForeignKey(
                name: "FK_ai_test_recommendations_lessons_LessonId",
                table: "ai_test_recommendations");

            migrationBuilder.DropForeignKey(
                name: "FK_ai_test_recommendations_subjects_SubjectId",
                table: "ai_test_recommendations");

            migrationBuilder.DropForeignKey(
                name: "FK_ai_test_recommendations_users_UserId",
                table: "ai_test_recommendations");

            migrationBuilder.DropForeignKey(
                name: "FK_exams_ai_test_recommendations_AITestRecommendationId",
                schema: "public",
                table: "exams");

            migrationBuilder.DropPrimaryKey(
                name: "PK_ai_test_recommendations",
                table: "ai_test_recommendations");

            migrationBuilder.RenameTable(
                name: "ai_test_recommendations",
                newName: "ai_test_recommendations",
                newSchema: "public");

            migrationBuilder.RenameIndex(
                name: "IX_ai_test_recommendations_UserId",
                schema: "public",
                table: "ai_test_recommendations",
                newName: "ix_ai_test_recommendations_user_id");

            migrationBuilder.RenameIndex(
                name: "IX_ai_test_recommendations_SubjectId",
                schema: "public",
                table: "ai_test_recommendations",
                newName: "ix_ai_test_recommendations_subject_id");

            migrationBuilder.AlterColumn<int>(
                name: "TotalMarks",
                schema: "public",
                table: "exams",
                type: "integer",
                nullable: true,
                oldClrType: typeof(int),
                oldType: "integer",
                oldNullable: true,
                oldDefaultValue: 100);

            migrationBuilder.AlterColumn<int>(
                name: "TimeLimit",
                schema: "public",
                table: "exams",
                type: "integer",
                nullable: true,
                oldClrType: typeof(int),
                oldType: "integer",
                oldNullable: true,
                oldDefaultValue: 60);

            migrationBuilder.AlterColumn<bool>(
                name: "IsAutoGenerated",
                schema: "public",
                table: "exams",
                type: "boolean",
                nullable: false,
                defaultValue: false,
                oldClrType: typeof(bool),
                oldType: "boolean");

            migrationBuilder.AlterColumn<bool>(
                name: "IsActive",
                schema: "public",
                table: "exam_types",
                type: "boolean",
                nullable: false,
                defaultValue: true,
                oldClrType: typeof(bool),
                oldType: "boolean");

            migrationBuilder.AlterColumn<DateTime>(
                name: "UpdatedAt",
                schema: "public",
                table: "ai_test_recommendations",
                type: "timestamp with time zone",
                nullable: false,
                defaultValueSql: "CURRENT_TIMESTAMP",
                oldClrType: typeof(DateTime),
                oldType: "timestamp with time zone");

            migrationBuilder.AlterColumn<bool>(
                name: "IsGenerated",
                schema: "public",
                table: "ai_test_recommendations",
                type: "boolean",
                nullable: false,
                defaultValue: false,
                oldClrType: typeof(bool),
                oldType: "boolean");

            migrationBuilder.AlterColumn<DateTime>(
                name: "CreatedAt",
                schema: "public",
                table: "ai_test_recommendations",
                type: "timestamp with time zone",
                nullable: false,
                defaultValueSql: "CURRENT_TIMESTAMP",
                oldClrType: typeof(DateTime),
                oldType: "timestamp with time zone");

            migrationBuilder.AlterColumn<decimal>(
                name: "ConfidenceScore",
                schema: "public",
                table: "ai_test_recommendations",
                type: "numeric(3,2)",
                nullable: false,
                defaultValue: 0m,
                oldClrType: typeof(decimal),
                oldType: "numeric");

            migrationBuilder.AlterColumn<bool>(
                name: "BasedOnWeakAreas",
                schema: "public",
                table: "ai_test_recommendations",
                type: "boolean",
                nullable: false,
                defaultValue: true,
                oldClrType: typeof(bool),
                oldType: "boolean");

            migrationBuilder.AlterColumn<bool>(
                name: "BasedOnProgress",
                schema: "public",
                table: "ai_test_recommendations",
                type: "boolean",
                nullable: false,
                defaultValue: true,
                oldClrType: typeof(bool),
                oldType: "boolean");

            migrationBuilder.AlterColumn<bool>(
                name: "BasedOnHistory",
                schema: "public",
                table: "ai_test_recommendations",
                type: "boolean",
                nullable: false,
                defaultValue: true,
                oldClrType: typeof(bool),
                oldType: "boolean");

            migrationBuilder.AddPrimaryKey(
                name: "pk_ai_test_recommendations",
                schema: "public",
                table: "ai_test_recommendations",
                column: "Id");

            migrationBuilder.CreateTable(
                name: "test_sessions",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UserId = table.Column<int>(type: "integer", nullable: false),
                    ExamId = table.Column<int>(type: "integer", nullable: false),
                    SessionStatus = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false, defaultValue: "NOT_STARTED"),
                    StartedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    CompletedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    TimeSpent = table.Column<int>(type: "integer", nullable: false, defaultValue: 0),
                    TotalScore = table.Column<decimal>(type: "numeric(5,2)", nullable: true),
                    CorrectAnswers = table.Column<int>(type: "integer", nullable: false, defaultValue: 0),
                    TotalQuestions = table.Column<int>(type: "integer", nullable: false, defaultValue: 0),
                    IsPassed = table.Column<bool>(type: "boolean", nullable: true),
                    PassingScore = table.Column<decimal>(type: "numeric(5,2)", nullable: true),
                    SessionData = table.Column<string>(type: "character varying(10000)", maxLength: 10000, nullable: true),
                    DeviceInfo = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                    IsCheatingDetected = table.Column<bool>(type: "boolean", nullable: false, defaultValue: false),
                    CheatingDetails = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    UpdatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP")
                },
                constraints: table =>
                {
                    table.PrimaryKey("pk_test_sessions", x => x.Id);
                    table.ForeignKey(
                        name: "fk_test_sessions_exam_id",
                        column: x => x.ExamId,
                        principalSchema: "public",
                        principalTable: "exams",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "fk_test_sessions_user_id",
                        column: x => x.UserId,
                        principalSchema: "public",
                        principalTable: "users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "user_competency_assessments",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UserId = table.Column<int>(type: "integer", nullable: false),
                    SubjectId = table.Column<int>(type: "integer", nullable: false),
                    ChapterId = table.Column<int>(type: "integer", nullable: true),
                    LessonId = table.Column<int>(type: "integer", nullable: true),
                    DifficultyLevel = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                    Topic = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    TotalQuestions = table.Column<int>(type: "integer", nullable: false, defaultValue: 0),
                    CorrectAnswers = table.Column<int>(type: "integer", nullable: false, defaultValue: 0),
                    IncorrectAnswers = table.Column<int>(type: "integer", nullable: false, defaultValue: 0),
                    AccuracyRate = table.Column<decimal>(type: "numeric(5,2)", nullable: false, defaultValue: 0m),
                    CompetencyScore = table.Column<decimal>(type: "numeric(3,2)", nullable: false, defaultValue: 0m),
                    ConfidenceLevel = table.Column<decimal>(type: "numeric(3,2)", nullable: false, defaultValue: 0m),
                    AverageTimePerQuestion = table.Column<decimal>(type: "numeric(8,2)", nullable: false, defaultValue: 0m),
                    TotalTimeSpent = table.Column<int>(type: "integer", nullable: false, defaultValue: 0),
                    LastAttemptedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    FirstAttemptedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    ImprovementTrend = table.Column<decimal>(type: "numeric(5,2)", nullable: false, defaultValue: 0m),
                    WeaknessAreas = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    StrengthAreas = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    RecommendedActions = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    IsActive = table.Column<bool>(type: "boolean", nullable: false, defaultValue: true),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    UpdatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP")
                },
                constraints: table =>
                {
                    table.PrimaryKey("pk_user_competency_assessments", x => x.Id);
                    table.ForeignKey(
                        name: "fk_user_competency_assessments_chapter_id",
                        column: x => x.ChapterId,
                        principalSchema: "public",
                        principalTable: "chapters",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "fk_user_competency_assessments_lesson_id",
                        column: x => x.LessonId,
                        principalSchema: "public",
                        principalTable: "lessons",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "fk_user_competency_assessments_subject_id",
                        column: x => x.SubjectId,
                        principalSchema: "public",
                        principalTable: "subjects",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "fk_user_competency_assessments_user_id",
                        column: x => x.UserId,
                        principalSchema: "public",
                        principalTable: "users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "user_learning_histories",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UserId = table.Column<int>(type: "integer", nullable: false),
                    SubjectId = table.Column<int>(type: "integer", nullable: false),
                    ChapterId = table.Column<int>(type: "integer", nullable: true),
                    LessonId = table.Column<int>(type: "integer", nullable: true),
                    QuestionId = table.Column<int>(type: "integer", nullable: true),
                    ExamId = table.Column<int>(type: "integer", nullable: true),
                    ActivityType = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                    TimeSpent = table.Column<int>(type: "integer", nullable: false, defaultValue: 0),
                    Score = table.Column<decimal>(type: "numeric(5,2)", nullable: true),
                    IsCorrect = table.Column<bool>(type: "boolean", nullable: true),
                    DifficultyLevel = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                    TopicTags = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                    WeakAreas = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    Strengths = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    LearningProgress = table.Column<decimal>(type: "numeric(3,2)", nullable: false, defaultValue: 0m),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP")
                },
                constraints: table =>
                {
                    table.PrimaryKey("pk_user_learning_histories", x => x.Id);
                    table.ForeignKey(
                        name: "fk_user_learning_histories_chapter_id",
                        column: x => x.ChapterId,
                        principalSchema: "public",
                        principalTable: "chapters",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "fk_user_learning_histories_exam_id",
                        column: x => x.ExamId,
                        principalSchema: "public",
                        principalTable: "exams",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "fk_user_learning_histories_lesson_id",
                        column: x => x.LessonId,
                        principalSchema: "public",
                        principalTable: "lessons",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "fk_user_learning_histories_question_id",
                        column: x => x.QuestionId,
                        principalSchema: "public",
                        principalTable: "questions",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "fk_user_learning_histories_subject_id",
                        column: x => x.SubjectId,
                        principalSchema: "public",
                        principalTable: "subjects",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "fk_user_learning_histories_user_id",
                        column: x => x.UserId,
                        principalSchema: "public",
                        principalTable: "users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "user_overall_competencies",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UserId = table.Column<int>(type: "integer", nullable: false),
                    SubjectId = table.Column<int>(type: "integer", nullable: false),
                    OverallScore = table.Column<decimal>(type: "numeric(3,2)", nullable: false, defaultValue: 0m),
                    OverallAccuracy = table.Column<decimal>(type: "numeric(5,2)", nullable: false, defaultValue: 0m),
                    TotalQuestionsAttempted = table.Column<int>(type: "integer", nullable: false, defaultValue: 0),
                    TotalCorrectAnswers = table.Column<int>(type: "integer", nullable: false, defaultValue: 0),
                    TotalIncorrectAnswers = table.Column<int>(type: "integer", nullable: false, defaultValue: 0),
                    TotalTimeSpent = table.Column<int>(type: "integer", nullable: false, defaultValue: 0),
                    AverageTimePerQuestion = table.Column<decimal>(type: "numeric(8,2)", nullable: false, defaultValue: 0m),
                    CompetencyLevel = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false, defaultValue: "BEGINNER"),
                    ConfidenceScore = table.Column<decimal>(type: "numeric(3,2)", nullable: false, defaultValue: 0m),
                    ConsistencyScore = table.Column<decimal>(type: "numeric(3,2)", nullable: false, defaultValue: 0m),
                    ImprovementRate = table.Column<decimal>(type: "numeric(5,2)", nullable: false, defaultValue: 0m),
                    Strengths = table.Column<string>(type: "character varying(2000)", maxLength: 2000, nullable: true),
                    Weaknesses = table.Column<string>(type: "character varying(2000)", maxLength: 2000, nullable: true),
                    RecommendedFocusAreas = table.Column<string>(type: "character varying(2000)", maxLength: 2000, nullable: true),
                    DifficultyBreakdown = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    TopicBreakdown = table.Column<string>(type: "character varying(2000)", maxLength: 2000, nullable: true),
                    LearningVelocity = table.Column<decimal>(type: "numeric(5,2)", nullable: false, defaultValue: 0m),
                    RetentionRate = table.Column<decimal>(type: "numeric(3,2)", nullable: false, defaultValue: 0m),
                    LastUpdated = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    UpdatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP")
                },
                constraints: table =>
                {
                    table.PrimaryKey("pk_user_overall_competencies", x => x.Id);
                    table.ForeignKey(
                        name: "fk_user_overall_competencies_subject_id",
                        column: x => x.SubjectId,
                        principalSchema: "public",
                        principalTable: "subjects",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "fk_user_overall_competencies_user_id",
                        column: x => x.UserId,
                        principalSchema: "public",
                        principalTable: "users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "user_question_carts",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UserId = table.Column<int>(type: "integer", nullable: false),
                    QuestionId = table.Column<int>(type: "integer", nullable: false),
                    AddedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    IsSelected = table.Column<bool>(type: "boolean", nullable: false, defaultValue: true),
                    UserNotes = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    DifficultyPreference = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                    SubjectId = table.Column<int>(type: "integer", nullable: true),
                    ChapterId = table.Column<int>(type: "integer", nullable: true),
                    LessonId = table.Column<int>(type: "integer", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pk_user_question_carts", x => x.Id);
                    table.ForeignKey(
                        name: "fk_user_question_carts_chapter_id",
                        column: x => x.ChapterId,
                        principalSchema: "public",
                        principalTable: "chapters",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "fk_user_question_carts_lesson_id",
                        column: x => x.LessonId,
                        principalSchema: "public",
                        principalTable: "lessons",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "fk_user_question_carts_question_id",
                        column: x => x.QuestionId,
                        principalSchema: "public",
                        principalTable: "questions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "fk_user_question_carts_subject_id",
                        column: x => x.SubjectId,
                        principalSchema: "public",
                        principalTable: "subjects",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "fk_user_question_carts_user_id",
                        column: x => x.UserId,
                        principalSchema: "public",
                        principalTable: "users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "test_session_answers",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    TestSessionId = table.Column<int>(type: "integer", nullable: false),
                    QuestionId = table.Column<int>(type: "integer", nullable: false),
                    SelectedAnswerId = table.Column<int>(type: "integer", nullable: true),
                    UserAnswer = table.Column<string>(type: "character varying(5000)", maxLength: 5000, nullable: true),
                    IsCorrect = table.Column<bool>(type: "boolean", nullable: true),
                    TimeSpent = table.Column<int>(type: "integer", nullable: false, defaultValue: 0),
                    AnsweredAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    IsMarkedForReview = table.Column<bool>(type: "boolean", nullable: false, defaultValue: false),
                    ConfidenceLevel = table.Column<int>(type: "integer", nullable: true),
                    AnswerSequence = table.Column<int>(type: "integer", nullable: false, defaultValue: 0),
                    IsChanged = table.Column<bool>(type: "boolean", nullable: false, defaultValue: false),
                    ChangeCount = table.Column<int>(type: "integer", nullable: false, defaultValue: 0),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    UpdatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP")
                },
                constraints: table =>
                {
                    table.PrimaryKey("pk_test_session_answers", x => x.Id);
                    table.ForeignKey(
                        name: "fk_test_session_answers_question_id",
                        column: x => x.QuestionId,
                        principalSchema: "public",
                        principalTable: "questions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "fk_test_session_answers_selected_answer_id",
                        column: x => x.SelectedAnswerId,
                        principalSchema: "public",
                        principalTable: "answers",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "fk_test_session_answers_test_session_id",
                        column: x => x.TestSessionId,
                        principalSchema: "public",
                        principalTable: "test_sessions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "user_question_attempts",
                schema: "public",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UserId = table.Column<int>(type: "integer", nullable: false),
                    QuestionId = table.Column<int>(type: "integer", nullable: false),
                    SelectedAnswerId = table.Column<int>(type: "integer", nullable: true),
                    UserAnswer = table.Column<string>(type: "character varying(5000)", maxLength: 5000, nullable: true),
                    IsCorrect = table.Column<bool>(type: "boolean", nullable: false),
                    TimeSpent = table.Column<int>(type: "integer", nullable: false, defaultValue: 0),
                    ConfidenceLevel = table.Column<int>(type: "integer", nullable: true),
                    AttemptType = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false, defaultValue: "PRACTICE"),
                    SessionId = table.Column<int>(type: "integer", nullable: true),
                    ExamId = table.Column<int>(type: "integer", nullable: true),
                    DifficultyLevel = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                    Topic = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    SubjectId = table.Column<int>(type: "integer", nullable: true),
                    ChapterId = table.Column<int>(type: "integer", nullable: true),
                    LessonId = table.Column<int>(type: "integer", nullable: true),
                    IsHintUsed = table.Column<bool>(type: "boolean", nullable: false, defaultValue: false),
                    HintCount = table.Column<int>(type: "integer", nullable: false, defaultValue: 0),
                    IsSkipped = table.Column<bool>(type: "boolean", nullable: false, defaultValue: false),
                    IsMarkedForReview = table.Column<bool>(type: "boolean", nullable: false, defaultValue: false),
                    AttemptSequence = table.Column<int>(type: "integer", nullable: false, defaultValue: 1),
                    PreviousAttempts = table.Column<int>(type: "integer", nullable: false, defaultValue: 0),
                    LearningOutcome = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                    MistakeType = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP")
                },
                constraints: table =>
                {
                    table.PrimaryKey("pk_user_question_attempts", x => x.Id);
                    table.ForeignKey(
                        name: "fk_user_question_attempts_chapter_id",
                        column: x => x.ChapterId,
                        principalSchema: "public",
                        principalTable: "chapters",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "fk_user_question_attempts_exam_id",
                        column: x => x.ExamId,
                        principalSchema: "public",
                        principalTable: "exams",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "fk_user_question_attempts_lesson_id",
                        column: x => x.LessonId,
                        principalSchema: "public",
                        principalTable: "lessons",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "fk_user_question_attempts_question_id",
                        column: x => x.QuestionId,
                        principalSchema: "public",
                        principalTable: "questions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "fk_user_question_attempts_selected_answer_id",
                        column: x => x.SelectedAnswerId,
                        principalSchema: "public",
                        principalTable: "answers",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "fk_user_question_attempts_session_id",
                        column: x => x.SessionId,
                        principalSchema: "public",
                        principalTable: "test_sessions",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "fk_user_question_attempts_subject_id",
                        column: x => x.SubjectId,
                        principalSchema: "public",
                        principalTable: "subjects",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "fk_user_question_attempts_user_id",
                        column: x => x.UserId,
                        principalSchema: "public",
                        principalTable: "users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_test_session_answers_QuestionId",
                schema: "public",
                table: "test_session_answers",
                column: "QuestionId");

            migrationBuilder.CreateIndex(
                name: "IX_test_session_answers_SelectedAnswerId",
                schema: "public",
                table: "test_session_answers",
                column: "SelectedAnswerId");

            migrationBuilder.CreateIndex(
                name: "ix_test_session_answers_test_session_id",
                schema: "public",
                table: "test_session_answers",
                column: "TestSessionId");

            migrationBuilder.CreateIndex(
                name: "ix_test_sessions_exam_id",
                schema: "public",
                table: "test_sessions",
                column: "ExamId");

            migrationBuilder.CreateIndex(
                name: "ix_test_sessions_user_id",
                schema: "public",
                table: "test_sessions",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_user_competency_assessments_ChapterId",
                schema: "public",
                table: "user_competency_assessments",
                column: "ChapterId");

            migrationBuilder.CreateIndex(
                name: "IX_user_competency_assessments_LessonId",
                schema: "public",
                table: "user_competency_assessments",
                column: "LessonId");

            migrationBuilder.CreateIndex(
                name: "ix_user_competency_assessments_subject_id",
                schema: "public",
                table: "user_competency_assessments",
                column: "SubjectId");

            migrationBuilder.CreateIndex(
                name: "ix_user_competency_assessments_topic",
                schema: "public",
                table: "user_competency_assessments",
                column: "Topic");

            migrationBuilder.CreateIndex(
                name: "ix_user_competency_assessments_user_id",
                schema: "public",
                table: "user_competency_assessments",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_user_learning_histories_ChapterId",
                schema: "public",
                table: "user_learning_histories",
                column: "ChapterId");

            migrationBuilder.CreateIndex(
                name: "IX_user_learning_histories_ExamId",
                schema: "public",
                table: "user_learning_histories",
                column: "ExamId");

            migrationBuilder.CreateIndex(
                name: "IX_user_learning_histories_LessonId",
                schema: "public",
                table: "user_learning_histories",
                column: "LessonId");

            migrationBuilder.CreateIndex(
                name: "IX_user_learning_histories_QuestionId",
                schema: "public",
                table: "user_learning_histories",
                column: "QuestionId");

            migrationBuilder.CreateIndex(
                name: "ix_user_learning_histories_subject_id",
                schema: "public",
                table: "user_learning_histories",
                column: "SubjectId");

            migrationBuilder.CreateIndex(
                name: "ix_user_learning_histories_user_id",
                schema: "public",
                table: "user_learning_histories",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "ix_user_overall_competencies_subject_id",
                schema: "public",
                table: "user_overall_competencies",
                column: "SubjectId");

            migrationBuilder.CreateIndex(
                name: "ix_user_overall_competencies_user_id",
                schema: "public",
                table: "user_overall_competencies",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_user_question_attempts_ChapterId",
                schema: "public",
                table: "user_question_attempts",
                column: "ChapterId");

            migrationBuilder.CreateIndex(
                name: "IX_user_question_attempts_ExamId",
                schema: "public",
                table: "user_question_attempts",
                column: "ExamId");

            migrationBuilder.CreateIndex(
                name: "IX_user_question_attempts_LessonId",
                schema: "public",
                table: "user_question_attempts",
                column: "LessonId");

            migrationBuilder.CreateIndex(
                name: "ix_user_question_attempts_question_id",
                schema: "public",
                table: "user_question_attempts",
                column: "QuestionId");

            migrationBuilder.CreateIndex(
                name: "IX_user_question_attempts_SelectedAnswerId",
                schema: "public",
                table: "user_question_attempts",
                column: "SelectedAnswerId");

            migrationBuilder.CreateIndex(
                name: "IX_user_question_attempts_SessionId",
                schema: "public",
                table: "user_question_attempts",
                column: "SessionId");

            migrationBuilder.CreateIndex(
                name: "ix_user_question_attempts_subject_id",
                schema: "public",
                table: "user_question_attempts",
                column: "SubjectId");

            migrationBuilder.CreateIndex(
                name: "ix_user_question_attempts_user_id",
                schema: "public",
                table: "user_question_attempts",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_user_question_carts_ChapterId",
                schema: "public",
                table: "user_question_carts",
                column: "ChapterId");

            migrationBuilder.CreateIndex(
                name: "IX_user_question_carts_LessonId",
                schema: "public",
                table: "user_question_carts",
                column: "LessonId");

            migrationBuilder.CreateIndex(
                name: "ix_user_question_carts_question_id",
                schema: "public",
                table: "user_question_carts",
                column: "QuestionId");

            migrationBuilder.CreateIndex(
                name: "IX_user_question_carts_SubjectId",
                schema: "public",
                table: "user_question_carts",
                column: "SubjectId");

            migrationBuilder.CreateIndex(
                name: "ix_user_question_carts_user_id",
                schema: "public",
                table: "user_question_carts",
                column: "UserId");

            migrationBuilder.AddForeignKey(
                name: "fk_ai_test_recommendations_chapter_id",
                schema: "public",
                table: "ai_test_recommendations",
                column: "ChapterId",
                principalSchema: "public",
                principalTable: "chapters",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "fk_ai_test_recommendations_generated_exam_id",
                schema: "public",
                table: "ai_test_recommendations",
                column: "GeneratedExamId",
                principalSchema: "public",
                principalTable: "exams",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "fk_ai_test_recommendations_lesson_id",
                schema: "public",
                table: "ai_test_recommendations",
                column: "LessonId",
                principalSchema: "public",
                principalTable: "lessons",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "fk_ai_test_recommendations_subject_id",
                schema: "public",
                table: "ai_test_recommendations",
                column: "SubjectId",
                principalSchema: "public",
                principalTable: "subjects",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "fk_ai_test_recommendations_user_id",
                schema: "public",
                table: "ai_test_recommendations",
                column: "UserId",
                principalSchema: "public",
                principalTable: "users",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "fk_exams_ai_test_recommendation_id",
                schema: "public",
                table: "exams",
                column: "AITestRecommendationId",
                principalSchema: "public",
                principalTable: "ai_test_recommendations",
                principalColumn: "Id");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "fk_ai_test_recommendations_chapter_id",
                schema: "public",
                table: "ai_test_recommendations");

            migrationBuilder.DropForeignKey(
                name: "fk_ai_test_recommendations_generated_exam_id",
                schema: "public",
                table: "ai_test_recommendations");

            migrationBuilder.DropForeignKey(
                name: "fk_ai_test_recommendations_lesson_id",
                schema: "public",
                table: "ai_test_recommendations");

            migrationBuilder.DropForeignKey(
                name: "fk_ai_test_recommendations_subject_id",
                schema: "public",
                table: "ai_test_recommendations");

            migrationBuilder.DropForeignKey(
                name: "fk_ai_test_recommendations_user_id",
                schema: "public",
                table: "ai_test_recommendations");

            migrationBuilder.DropForeignKey(
                name: "fk_exams_ai_test_recommendation_id",
                schema: "public",
                table: "exams");

            migrationBuilder.DropTable(
                name: "test_session_answers",
                schema: "public");

            migrationBuilder.DropTable(
                name: "user_competency_assessments",
                schema: "public");

            migrationBuilder.DropTable(
                name: "user_learning_histories",
                schema: "public");

            migrationBuilder.DropTable(
                name: "user_overall_competencies",
                schema: "public");

            migrationBuilder.DropTable(
                name: "user_question_attempts",
                schema: "public");

            migrationBuilder.DropTable(
                name: "user_question_carts",
                schema: "public");

            migrationBuilder.DropTable(
                name: "test_sessions",
                schema: "public");

            migrationBuilder.DropPrimaryKey(
                name: "pk_ai_test_recommendations",
                schema: "public",
                table: "ai_test_recommendations");

            migrationBuilder.RenameTable(
                name: "ai_test_recommendations",
                schema: "public",
                newName: "ai_test_recommendations");

            migrationBuilder.RenameIndex(
                name: "ix_ai_test_recommendations_user_id",
                table: "ai_test_recommendations",
                newName: "IX_ai_test_recommendations_UserId");

            migrationBuilder.RenameIndex(
                name: "ix_ai_test_recommendations_subject_id",
                table: "ai_test_recommendations",
                newName: "IX_ai_test_recommendations_SubjectId");

            migrationBuilder.AlterColumn<int>(
                name: "TotalMarks",
                schema: "public",
                table: "exams",
                type: "integer",
                nullable: true,
                defaultValue: 100,
                oldClrType: typeof(int),
                oldType: "integer",
                oldNullable: true);

            migrationBuilder.AlterColumn<int>(
                name: "TimeLimit",
                schema: "public",
                table: "exams",
                type: "integer",
                nullable: true,
                defaultValue: 60,
                oldClrType: typeof(int),
                oldType: "integer",
                oldNullable: true);

            migrationBuilder.AlterColumn<bool>(
                name: "IsAutoGenerated",
                schema: "public",
                table: "exams",
                type: "boolean",
                nullable: false,
                oldClrType: typeof(bool),
                oldType: "boolean",
                oldDefaultValue: false);

            migrationBuilder.AlterColumn<bool>(
                name: "IsActive",
                schema: "public",
                table: "exam_types",
                type: "boolean",
                nullable: false,
                oldClrType: typeof(bool),
                oldType: "boolean",
                oldDefaultValue: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "UpdatedAt",
                table: "ai_test_recommendations",
                type: "timestamp with time zone",
                nullable: false,
                oldClrType: typeof(DateTime),
                oldType: "timestamp with time zone",
                oldDefaultValueSql: "CURRENT_TIMESTAMP");

            migrationBuilder.AlterColumn<bool>(
                name: "IsGenerated",
                table: "ai_test_recommendations",
                type: "boolean",
                nullable: false,
                oldClrType: typeof(bool),
                oldType: "boolean",
                oldDefaultValue: false);

            migrationBuilder.AlterColumn<DateTime>(
                name: "CreatedAt",
                table: "ai_test_recommendations",
                type: "timestamp with time zone",
                nullable: false,
                oldClrType: typeof(DateTime),
                oldType: "timestamp with time zone",
                oldDefaultValueSql: "CURRENT_TIMESTAMP");

            migrationBuilder.AlterColumn<decimal>(
                name: "ConfidenceScore",
                table: "ai_test_recommendations",
                type: "numeric",
                nullable: false,
                oldClrType: typeof(decimal),
                oldType: "numeric(3,2)",
                oldDefaultValue: 0m);

            migrationBuilder.AlterColumn<bool>(
                name: "BasedOnWeakAreas",
                table: "ai_test_recommendations",
                type: "boolean",
                nullable: false,
                oldClrType: typeof(bool),
                oldType: "boolean",
                oldDefaultValue: true);

            migrationBuilder.AlterColumn<bool>(
                name: "BasedOnProgress",
                table: "ai_test_recommendations",
                type: "boolean",
                nullable: false,
                oldClrType: typeof(bool),
                oldType: "boolean",
                oldDefaultValue: true);

            migrationBuilder.AlterColumn<bool>(
                name: "BasedOnHistory",
                table: "ai_test_recommendations",
                type: "boolean",
                nullable: false,
                oldClrType: typeof(bool),
                oldType: "boolean",
                oldDefaultValue: true);

            migrationBuilder.AddPrimaryKey(
                name: "PK_ai_test_recommendations",
                table: "ai_test_recommendations",
                column: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_ai_test_recommendations_chapters_ChapterId",
                table: "ai_test_recommendations",
                column: "ChapterId",
                principalSchema: "public",
                principalTable: "chapters",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_ai_test_recommendations_exams_GeneratedExamId",
                table: "ai_test_recommendations",
                column: "GeneratedExamId",
                principalSchema: "public",
                principalTable: "exams",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_ai_test_recommendations_lessons_LessonId",
                table: "ai_test_recommendations",
                column: "LessonId",
                principalSchema: "public",
                principalTable: "lessons",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_ai_test_recommendations_subjects_SubjectId",
                table: "ai_test_recommendations",
                column: "SubjectId",
                principalSchema: "public",
                principalTable: "subjects",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_ai_test_recommendations_users_UserId",
                table: "ai_test_recommendations",
                column: "UserId",
                principalSchema: "public",
                principalTable: "users",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_exams_ai_test_recommendations_AITestRecommendationId",
                schema: "public",
                table: "exams",
                column: "AITestRecommendationId",
                principalTable: "ai_test_recommendations",
                principalColumn: "Id");
        }
    }
}
