using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System.Text;
using teamseven.EzExam.Repository;
using teamseven.EzExam.Services.Interfaces;
using teamseven.EzExam.Services.Object.Requests;
using teamseven.EzExam.Services.Object.Responses;
using teamseven.EzExam.Services.Services.QuestionsService;
using teamseven.EzExam.Services.Services.ExamService;

namespace teamseven.EzExam.Services.Services.AIExamGenerationService
{
    public class AIExamGenerationService : IAIExamGenerationService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IQuestionsService _questionsService;
        private readonly IExamHistoryService _examHistoryService;
        private readonly IExamService _examService;
        private readonly IConfiguration _configuration;
        private readonly ILogger<AIExamGenerationService> _logger;
        private readonly HttpClient _httpClient;

        public AIExamGenerationService(
            IUnitOfWork unitOfWork,
            IQuestionsService questionsService,
            IExamHistoryService examHistoryService,
            IExamService examService,
            IConfiguration configuration,
            ILogger<AIExamGenerationService> logger,
            HttpClient httpClient)
        {
            _unitOfWork = unitOfWork;
            _questionsService = questionsService;
            _examHistoryService = examHistoryService;
            _examService = examService;
            _configuration = configuration;
            _logger = logger;
            _httpClient = httpClient;
        }

        public async Task<GenerateAIExamResponse> GenerateExamAsync(GenerateAIExamRequest request)
        {
            var startTime = DateTime.UtcNow;
            var stopwatch = System.Diagnostics.Stopwatch.StartNew();

            try
            {
                var examHistory = await GetUserExamHistoryMinimalAsync(request.UserId, request.HistoryCount);

                if (examHistory == null)
                {
                    examHistory = new List<ExamHistoryMinimalResponse>();
                }

                var availableQuestions = await GetAvailableQuestionsMinimalAsync(request);

                if (availableQuestions == null)
                {
                    availableQuestions = new List<QuestionMinimalResponse>();
                }

                if (availableQuestions.Count == 0)
                {
                    _logger.LogError("No available questions found after all retry attempts");
                    
                    return new GenerateAIExamResponse
                    {
                        Success = false,
                        Message = "Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi ph√π h·ª£p v·ªõi ti√™u ch√≠ ƒë√£ ch·ªçn. Vui l√≤ng th·ª≠ l·∫°i v·ªõi b·ªô l·ªçc kh√°c ho·∫∑c li√™n h·ªá admin.",
                        Questions = new List<AIQuestionResponse>(),
                        Metadata = new AIExamMetadata
                        {
                            TotalQuestions = 0,
                            Mode = request.Mode,
                            UserId = request.UserId,
                            GeneratedAt = DateTime.UtcNow,
                            AIModel = "gpt-4",
                            TokensUsed = 0,
                            ProcessingTimeSeconds = stopwatch.Elapsed.TotalSeconds
                        }
                    };
                }

                // Log chi ti·∫øt c√¢u h·ªèi c√≥ s·∫µn
                var difficultyGroups = availableQuestions.GroupBy(q => q.DifficultyLevel);
                foreach (var group in difficultyGroups)
                {
                    // summary suppressed in production
                }

                var gradeGroups = availableQuestions.GroupBy(q => q.GradeName);
                foreach (var group in gradeGroups)
                {
                    // summary suppressed in production
                }

                // L·ªçc l·ªãch s·ª≠ theo y√™u c·∫ßu c·ªßa user ƒë·ªÉ AI hi·ªÉu ƒë√∫ng context
                var filteredHistory = FilterExamHistoryByRequest(examHistory, request);
                // Filtered history summary suppressed in production

                // 3. X√¢y d·ª±ng prompt v·ªõi data t·ªëi thi·ªÉu
                // building prompt (log suppressed)
                var prompt = await BuildPromptMinimalAsync(request, filteredHistory, availableQuestions);
                // prompt built (length suppressed)

                // Log prompt preview (first 500 chars)
                var promptPreview = prompt.Length > 500 ? prompt.Substring(0, 500) + "..." : prompt;
                // prompt preview suppressed

                // 4. G·ªçi OpenAI API
                // calling OpenAI (log suppressed)
                var aiResponse = await CallOpenAIAsync(prompt);
                // OpenAI response received (size suppressed)

                // Log AI response preview
                var responsePreview = aiResponse.Length > 300 ? aiResponse.Substring(0, 300) + "..." : aiResponse;
                // AI response preview suppressed

                // 5. Parse response t·ª´ AI
                // parsing AI response (log suppressed)
                var result = await ParseAIResponseAsync(aiResponse, request);
                // AI parsed successfully (summary suppressed)

                stopwatch.Stop();

                // 6. C·∫≠p nh·∫≠t metadata
                result.Metadata.ProcessingTimeSeconds = stopwatch.Elapsed.TotalSeconds;
                result.Metadata.GeneratedAt = DateTime.UtcNow;
                result.Metadata.TotalQuestions = result.Questions.Count;

                // 7. L∆∞u exam v√†o database
                // saving exam to database (log suppressed)
                var examId = await SaveAIExamToDatabaseAsync(request, result);
                if (examId > 0)
                {
                    result.Metadata.ExamId = examId;
                    result.Message = $"T·∫°o ƒë·ªÅ thi th√†nh c√¥ng v·ªõi {result.Questions.Count} c√¢u h·ªèi. Exam ID: {examId}";
                    // exam saved successfully (log suppressed)
                }
                else
                {
                    _logger.LogWarning("‚ö†Ô∏è Failed to save exam to database, but questions were generated");
                }

                // AI exam generation completed (summary suppressed)

                return result;
            }
            catch (Exception ex)
            {
                stopwatch.Stop();
                _logger.LogError(ex, "‚ùå Error generating AI exam for UserId: {UserId}. Error: {ErrorMessage}", request.UserId, ex.Message);
                
                return new GenerateAIExamResponse
                {
                    Success = false,
                    Message = $"L·ªói khi t·∫°o ƒë·ªÅ thi: {ex.Message}",
                    Questions = new List<AIQuestionResponse>(),
                    Metadata = new AIExamMetadata
                    {
                        TotalQuestions = 0,
                        Mode = request.Mode,
                        UserId = request.UserId,
                        GeneratedAt = DateTime.UtcNow,
                        AIModel = "gpt-4",
                        TokensUsed = 0,
                        ProcessingTimeSeconds = stopwatch.Elapsed.TotalSeconds
                    }
                };
            }
        }

        public async Task<List<ExamHistoryMinimalResponse>> GetUserExamHistoryMinimalAsync(int userId, int count = 5)
        {
            try
            {
                var histories = await _examHistoryService.GetExamHistoriesMinimalByUserIdAsync(userId);
                
                        // Convert to minimal response - only necessary fields
                var minimalHistories = histories
                    .OrderByDescending(h => h.SubmittedAt)
                    .Take(count)
                    .ToList();

                        _logger.LogInformation("Retrieved {Count} minimal exam history records for user {UserId}", minimalHistories.Count, userId);
                return minimalHistories;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving exam history for UserId: {UserId}", userId);
                return new List<ExamHistoryMinimalResponse>();
            }
        }

        public async Task<List<ExamHistoryResponse>> GetUserExamHistoryAsync(int userId, int count = 5)
        {
            try
            {
                var histories = await _examHistoryService.GetExamHistoriesByUserIdAsync(userId);
                return histories
                    .OrderByDescending(h => h.SubmittedAt)
                    .Take(count)
                    .ToList();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving exam history for UserId: {UserId}", userId);
                return new List<ExamHistoryResponse>();
            }
        }

        public async Task<List<QuestionMinimalResponse>> GetAvailableQuestionsMinimalAsync(GenerateAIExamRequest request)
        {
            try
            {
                        _logger.LogInformation("üîç Starting question retrieval for UserId: {UserId}", request.UserId);
                        _logger.LogInformation("üìù Initial request - SubjectIds: [{SubjectIds}], GradeIds: [{GradeIds}], ChapterIds: [{ChapterIds}], LessonIds: [{LessonIds}]", 
                            request.SubjectIds != null && request.SubjectIds.Any() ? string.Join(", ", request.SubjectIds) : "null",
                            request.GradeIds != null && request.GradeIds.Any() ? string.Join(", ", request.GradeIds) : "null",
                            request.ChapterIds != null && request.ChapterIds.Any() ? string.Join(", ", request.ChapterIds) : "null",
                            request.LessonIds != null && request.LessonIds.Any() ? string.Join(", ", request.LessonIds) : "null");
                
                // L·∫•y l·ªãch s·ª≠ ƒë·ªÉ ph√¢n t√≠ch (lu√¥n l·∫•y ƒë·ªÉ c√≥ context cho AI)
                var examHistory = await GetUserExamHistoryMinimalAsync(request.UserId, request.HistoryCount);
                
                // X√°c ƒë·ªãnh PH·∫†M VI gen c√¢u h·ªèi (SubjectIds, GradeIds, LessonIds)
                // 2 ngu·ªìn B·ªî TR·ª¢ nhau:
                // 1. Request c·ªßa user ‚Üí X√°c ƒë·ªãnh ph·∫°m vi gen ƒë·ªÅ
                // 2. L·ªãch s·ª≠ l√†m b√†i ‚Üí AI bi·∫øt h·ªçc sinh l√†m sai ch·ªó n√†o, c·∫ßn c·∫£i thi·ªán g√¨
                List<int>? finalSubjectIds = request.SubjectIds;
                List<int>? finalGradeIds = request.GradeIds;
                List<int>? finalLessonIds = request.LessonIds;
                
                if (examHistory.Any())
                {
                    _logger.LogInformation("üìà Found {Count} exam history records for analysis", examHistory.Count);
                    
                    // Ph√¢n t√≠ch l·ªãch s·ª≠ ƒë·ªÉ hi·ªÉu nƒÉng l·ª±c h·ªçc sinh
                    var mostCommonSubject = examHistory.GroupBy(h => h.SubjectId)
                        .OrderByDescending(g => g.Count())
                        .First().Key;
                    var mostCommonGrade = examHistory.Where(h => h.GradeId.HasValue)
                        .GroupBy(h => h.GradeId)
                        .OrderByDescending(g => g.Count())
                        .FirstOrDefault()?.Key;

                    var mostRecentHistory = examHistory.First();
                            _logger.LogInformation("üéØ History shows student mainly studies: Subject {SubjectId} ({SubjectName}), Grade {GradeId} ({GradeName})", 
                        mostCommonSubject, mostRecentHistory.SubjectName, mostCommonGrade, mostRecentHistory.GradeName);

                    // X√°c ƒë·ªãnh PH·∫†M VI gen c√¢u h·ªèi
                    // N·∫øu user ch·ªâ ƒë·ªãnh ‚Üí D√πng ph·∫°m vi c·ªßa user
                    // N·∫øu kh√¥ng ‚Üí Auto-detect t·ª´ l·ªãch s·ª≠
                    if (finalSubjectIds == null || !finalSubjectIds.Any())
                    {
                        finalSubjectIds = new List<int> { mostCommonSubject };
                                _logger.LogInformation("‚úÖ Scope: Auto-detected SubjectIds [{SubjectIds}] from history", 
                            string.Join(", ", finalSubjectIds));
                    }
                    else
                    {
                                _logger.LogInformation("üë§ Scope: User selected SubjectIds [{SubjectIds}]", 
                            string.Join(", ", finalSubjectIds));
                    }
                    
                    if ((finalGradeIds == null || !finalGradeIds.Any()) && mostCommonGrade.HasValue)
                    {
                        finalGradeIds = new List<int> { mostCommonGrade.Value };
                                _logger.LogInformation("‚úÖ Scope: Auto-detected GradeIds [{GradeIds}] from history", 
                            string.Join(", ", finalGradeIds));
                    }
                    else if (finalGradeIds != null && finalGradeIds.Any())
                    {
                                _logger.LogInformation("üë§ Scope: User selected GradeIds [{GradeIds}]", 
                            string.Join(", ", finalGradeIds));
                    }

                    if (finalLessonIds != null && finalLessonIds.Any())
                    {
                                _logger.LogInformation("üë§ Scope: User selected LessonIds [{LessonIds}]", 
                            string.Join(", ", finalLessonIds));
                    }
                }
                else
                {
                    _logger.LogWarning("‚ö†Ô∏è No exam history found for user {UserId}", request.UserId);
                    // N·∫øu kh√¥ng c√≥ l·ªãch s·ª≠ nh∆∞ng user c√≥ y√™u c·∫ßu ‚Üí S·ª≠ d·ª•ng y√™u c·∫ßu c·ªßa user
                    if ((finalSubjectIds == null || !finalSubjectIds.Any()) || (finalGradeIds == null || !finalGradeIds.Any()))
                    {
                        _logger.LogWarning("‚ö†Ô∏è No history and no user-provided SubjectIds/GradeIds. Cannot proceed.");
                    }
                    else
                    {
                                _logger.LogInformation("‚úÖ No history, but using user-provided filters: SubjectIds [{SubjectIds}], GradeIds [{GradeIds}]",
                            string.Join(", ", finalSubjectIds ?? new List<int>()),
                            string.Join(", ", finalGradeIds ?? new List<int>()));
                    }
                }

                        _logger.LogInformation("üîç [ATTEMPT 1] Final search criteria - SubjectIds: [{SubjectIds}], GradeIds: [{GradeIds}], ChapterIds: [{ChapterIds}], LessonIds: [{LessonIds}], DifficultyLevelId: {DifficultyLevelId}", 
                    finalSubjectIds != null ? string.Join(", ", finalSubjectIds) : "null",
                    finalGradeIds != null ? string.Join(", ", finalGradeIds) : "null",
                    request.ChapterIds != null && request.ChapterIds.Any() ? string.Join(", ", request.ChapterIds) : "null",
                    finalLessonIds != null ? string.Join(", ", finalLessonIds) : "null",
                    request.DifficultyLevelId?.ToString() ?? "null");

                var searchRequest = new QuestionSearchRequest
                {
                    SubjectIds = finalSubjectIds,
                    GradeIds = finalGradeIds,
                    ChapterIds = request.ChapterIds,
                    LessonIds = finalLessonIds,
                    DifficultyLevelId = request.DifficultyLevelId
                };

                        _logger.LogInformation("üì° [ATTEMPT 1] Calling QuestionService with auto-detect from history...");
                var questions = await _questionsService.GetAllQuestionsSimpleAsync(searchRequest);
                        _logger.LogInformation("üì• [ATTEMPT 1] Received {Count} questions from QuestionService", questions.Count);
                
                // ‚ö†Ô∏è RETRY LOGIC: N·∫øu kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o ‚Üí Th·ª≠ l·∫°i CH·ªà d·ª±a v√†o request c·ªßa user
                if (questions.Count == 0)
                {
                    _logger.LogWarning("‚ö†Ô∏è [ATTEMPT 1] No questions found with auto-detect. Retrying with ONLY user request (ignore history)...");
                    
                    // Ki·ªÉm tra xem user c√≥ cung c·∫•p filter kh√¥ng
                    bool hasUserFilters = (request.SubjectIds != null && request.SubjectIds.Any()) ||
                                         (request.GradeIds != null && request.GradeIds.Any()) ||
                                         (request.ChapterIds != null && request.ChapterIds.Any()) ||
                                         (request.LessonIds != null && request.LessonIds.Any()) ||
                                         request.DifficultyLevelId.HasValue;

                    QuestionSearchRequest? retrySearchRequest = null;

                    if (hasUserFilters)
                    {
                        // T·∫°o search request CH·ªà t·ª´ y√™u c·∫ßu c·ªßa user, B·ªé QUA auto-detect
                        retrySearchRequest = new QuestionSearchRequest
                        {
                            SubjectIds = request.SubjectIds,
                            GradeIds = request.GradeIds,
                            ChapterIds = request.ChapterIds,
                            LessonIds = request.LessonIds,
                            DifficultyLevelId = request.DifficultyLevelId
                        };

                                _logger.LogInformation("üîç [ATTEMPT 2] Retry with ONLY user filters - SubjectIds: [{SubjectIds}], GradeIds: [{GradeIds}], ChapterIds: [{ChapterIds}], LessonIds: [{LessonIds}], DifficultyLevelId: {DifficultyLevelId}",
                            request.SubjectIds != null && request.SubjectIds.Any() ? string.Join(", ", request.SubjectIds) : "null",
                            request.GradeIds != null && request.GradeIds.Any() ? string.Join(", ", request.GradeIds) : "null",
                            request.ChapterIds != null && request.ChapterIds.Any() ? string.Join(", ", request.ChapterIds) : "null",
                            request.LessonIds != null && request.LessonIds.Any() ? string.Join(", ", request.LessonIds) : "null",
                            request.DifficultyLevelId?.ToString() ?? "null");
                    }
                    else
                    {
                        // User kh√¥ng c√≥ filter g√¨ ‚Üí L·∫•y T·∫§T C·∫¢ c√¢u h·ªèi (null = no filter)
                        _logger.LogWarning("‚ö†Ô∏è [ATTEMPT 2] User has NO filters. Fetching ALL questions from database...");
                        retrySearchRequest = null; // null = l·∫•y t·∫•t c·∫£
                    }

                            _logger.LogInformation("üì° [ATTEMPT 2] Calling QuestionService...");
                    questions = await _questionsService.GetAllQuestionsSimpleAsync(retrySearchRequest);
                            _logger.LogInformation("üì• [ATTEMPT 2] Received {Count} questions from QuestionService", questions.Count);

                    if (questions.Count == 0)
                    {
                        _logger.LogError("‚ùå [ATTEMPT 2] Still no questions found. Both attempts failed.");
                    }
                    else
                    {
                        _logger.LogInformation("‚úÖ [ATTEMPT 2] Successfully found {Count} questions without history auto-detect!", questions.Count);
                    }
                }
                
                // Convert to minimal response - ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
                var minimalQuestions = questions.Select(q => new QuestionMinimalResponse
                {
                    Id = q.Id,
                    Content = q.Content,
                    DifficultyLevel = q.DifficultyLevel ?? "MEDIUM",
                    GradeName = q.GradeName ?? "Unknown",
                    LessonName = q.LessonName ?? "Unknown"
                }).ToList();

                        _logger.LogInformation("‚úÖ Converted to {Count} minimal questions", minimalQuestions.Count);
                _logger.LogInformation("üìä Question Distribution:");
                
                var difficultyGroups = minimalQuestions.GroupBy(q => q.DifficultyLevel);
                foreach (var group in difficultyGroups)
                {
                    _logger.LogInformation("  üéØ Difficulty {Difficulty}: {Count} questions", group.Key, group.Count());
                }

                var gradeGroups = minimalQuestions.GroupBy(q => q.GradeName);
                foreach (var group in gradeGroups)
                {
                    _logger.LogInformation("  üè´ Grade {Grade}: {Count} questions", group.Key, group.Count());
                }

                var lessonGroups = minimalQuestions.GroupBy(q => q.LessonName);
                foreach (var group in lessonGroups.Take(5)) // Limit to first 5 lessons
                {
                    _logger.LogInformation("  üìñ Lesson {Lesson}: {Count} questions", group.Key, group.Count());
                }

                _logger.LogInformation("‚úÖ Successfully retrieved {Count} minimal questions", minimalQuestions.Count);

                return minimalQuestions;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error retrieving available questions for UserId: {UserId}. Error: {ErrorMessage}", request.UserId, ex.Message);
                return new List<QuestionMinimalResponse>();
            }
        }

        public async Task<List<QuestionSimpleResponse>> GetAvailableQuestionsAsync(GenerateAIExamRequest request)
        {
            try
            {
                var searchRequest = new QuestionSearchRequest
                {
                    SubjectIds = request.SubjectIds,
                    GradeIds = request.GradeIds,
                    ChapterIds = request.ChapterIds,
                    LessonIds = request.LessonIds,
                    DifficultyLevelId = request.DifficultyLevelId
                };

                var questions = await _questionsService.GetAllQuestionsSimpleAsync(searchRequest);

                _logger.LogInformation("Retrieved {Count} questions for SubjectIds: [{SubjectIds}], GradeIds: [{GradeIds}], ChapterIds: [{ChapterIds}], LessonIds: [{LessonIds}]", 
                    questions.Count, 
                    request.SubjectIds != null && request.SubjectIds.Any() ? string.Join(", ", request.SubjectIds) : "null",
                    request.GradeIds != null && request.GradeIds.Any() ? string.Join(", ", request.GradeIds) : "null",
                    request.ChapterIds != null && request.ChapterIds.Any() ? string.Join(", ", request.ChapterIds) : "null",
                    request.LessonIds != null && request.LessonIds.Any() ? string.Join(", ", request.LessonIds) : "null");

                return questions;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving available questions");
                return new List<QuestionSimpleResponse>();
            }
        }

        public async Task<string> BuildPromptMinimalAsync(GenerateAIExamRequest request, List<ExamHistoryMinimalResponse> history, List<QuestionMinimalResponse> questions)
        {
            var promptBuilder = new StringBuilder();

            // System prompt - simplified and direct
            promptBuilder.AppendLine($"üéØ M·ª§C TI√äU: Ch·ªçn ƒê√öNG {request.QuestionCount} c√¢u h·ªèi ƒë·ªÉ gen ƒë·ªÅ thi");
            promptBuilder.AppendLine($"üìö MODE: {(request.Mode == "review" ? "√în t·∫≠p (∆∞u ti√™n d·ªÖ-trung b√¨nh)" : "N√¢ng cao (∆∞u ti√™n trung b√¨nh-kh√≥)")}");
            promptBuilder.AppendLine();

            // User's exam history (minimal) - ƒê·ªÉ AI hi·ªÉu h·ªçc sinh l√†m sai ch·ªó n√†o
            promptBuilder.AppendLine("L·ªäCH S·ª¨ L√ÄM B√ÄI (trong ph·∫°m vi ƒë√£ ch·ªçn) - Ph√¢n t√≠ch ƒë·ªÉ bi·∫øt h·ªçc sinh l√†m SAI CH·ªñ N√ÄO:");
            if (history.Any())
            {
                foreach (var h in history)
                {
                    promptBuilder.AppendLine($"- ƒêi·ªÉm: {h.Score}/100, ƒê√∫ng: {h.CorrectCount}/{h.TotalQuestions}, Th·ªùi gian: {h.TimeTaken}s, Ng√†y: {h.SubmittedAt:dd/MM/yyyy}");
                    promptBuilder.AppendLine($"  M√¥n: {h.SubjectName}, L·ªõp: {h.GradeName}, Ch∆∞∆°ng: {h.ChapterName}, B√†i: {h.LessonName}");
                }
            }
            else
            {
                promptBuilder.AppendLine("- Ch∆∞a c√≥ l·ªãch s·ª≠ l√†m b√†i");
            }
            promptBuilder.AppendLine();

            // Available questions (minimal) - ƒë√£ ƒë∆∞·ª£c l·ªçc theo ph·∫°m vi user ch·ªçn
            promptBuilder.AppendLine("DANH S√ÅCH C√ÇU H·ªéI (ƒë√£ l·ªçc theo ph·∫°m vi user ch·ªçn):");
            
            // G·ª≠i √≠t nh·∫•t 2x s·ªë c√¢u c·∫ßn ch·ªçn, t·ªëi ƒëa 100 c√¢u ƒë·ªÉ ti·∫øt ki·ªám token
            // V√≠ d·ª•: C·∫ßn 10 c√¢u ‚Üí G·ª≠i 20-30 c√¢u; C·∫ßn 50 c√¢u ‚Üí G·ª≠i 100 c√¢u
            var minQuestions = Math.Min(request.QuestionCount * 2, 100);
            var maxQuestions = Math.Min(request.QuestionCount * 3, 150);
            var questionLimit = Math.Min(Math.Max(minQuestions, questions.Count), maxQuestions);
            var limitedQuestions = questions.Take(questionLimit).ToList();
            
            // R√∫t ng·∫Øn content d·ª±a v√†o s·ªë c√¢u h·ªèi
            // N·∫øu nhi·ªÅu c√¢u (>30) ‚Üí R√∫t ng·∫Øn 60 k√Ω t·ª± ƒë·ªÉ ti·∫øt ki·ªám token
            // N·∫øu √≠t c√¢u (<=30) ‚Üí Hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß h∆°n (100 k√Ω t·ª±)
            var maxContentLength = limitedQuestions.Count > 30 ? 60 : 100;
            
            foreach (var q in limitedQuestions)
            {
                var shortContent = q.Content.Length > maxContentLength 
                    ? q.Content.Substring(0, maxContentLength) + "..." 
                    : q.Content;
                promptBuilder.AppendLine($"ID: {q.Id} | {shortContent} | ƒê·ªô kh√≥: {q.DifficultyLevel}");
            }
            promptBuilder.AppendLine($"(T·ªïng {questions.Count} c√¢u, hi·ªÉn th·ªã {limitedQuestions.Count} c√¢u)");
            promptBuilder.AppendLine();

            // Instructions - K·∫øt h·ª£p l·ªãch s·ª≠ v√† y√™u c·∫ßu
            promptBuilder.AppendLine("Y√äU C·∫¶U:");
            promptBuilder.AppendLine($"1. Ph√¢n t√≠ch L·ªäCH S·ª¨ ‚Üí Hi·ªÉu ƒëi·ªÉm y·∫øu c·ªßa h·ªçc sinh");
            promptBuilder.AppendLine($"2. Ch·ªçn t·ª´ DANH S√ÅCH ‚Üí {request.QuestionCount} c√¢u gi√∫p c·∫£i thi·ªán nƒÉng l·ª±c");
            promptBuilder.AppendLine($"3. Tu√¢n th·ªß MODE ‚Üí {(request.Mode == "review" ? "C√¢u d·ªÖ-trung b√¨nh" : "C√¢u trung b√¨nh-kh√≥")}");
            promptBuilder.AppendLine();
            promptBuilder.AppendLine("OUTPUT (JSON):");
            promptBuilder.AppendLine("{");
            promptBuilder.AppendLine("  \"selectedQuestions\": [");
            promptBuilder.AppendLine("    {\"questionId\": 123, \"reasoning\": \"L√Ω do ch·ªçn\"},");
            promptBuilder.AppendLine($"    ... ({request.QuestionCount} c√¢u)");
            promptBuilder.AppendLine("  ],");
            promptBuilder.AppendLine("  \"analysis\": \"Ph√¢n t√≠ch ng·∫Øn g·ªçn v·ªÅ nƒÉng l·ª±c h·ªçc sinh\"");
            promptBuilder.AppendLine("}");

            return promptBuilder.ToString();
        }

        public async Task<string> BuildPromptAsync(GenerateAIExamRequest request, List<ExamHistoryResponse> history, List<QuestionSimpleResponse> questions)
        {
            var promptBuilder = new StringBuilder();

            // System prompt
            promptBuilder.AppendLine("B·∫°n l√† m·ªôt AI chuy√™n gia gi√°o d·ª•c, c√≥ nhi·ªám v·ª• t·∫°o ƒë·ªÅ thi t·ª± ƒë·ªông d·ª±a tr√™n l·ªãch s·ª≠ h·ªçc t·∫≠p v√† nƒÉng l·ª±c c·ªßa h·ªçc sinh.");
            promptBuilder.AppendLine();
            promptBuilder.AppendLine("NHI·ªÜM V·ª§:");
            promptBuilder.AppendLine($"- T·∫°o ƒë·ªÅ thi g·ªìm {request.QuestionCount} c√¢u h·ªèi");
            promptBuilder.AppendLine($"- Mode: {(request.Mode == "review" ? "√în l·∫°i ki·∫øn th·ª©c" : "N√¢ng cao k·ªπ nƒÉng")}");
            promptBuilder.AppendLine("- Ph√¢n t√≠ch l·ªãch s·ª≠ l√†m b√†i ƒë·ªÉ hi·ªÉu ƒëi·ªÉm m·∫°nh/y·∫øu c·ªßa h·ªçc sinh");
            promptBuilder.AppendLine("- Ch·ªçn c√¢u h·ªèi ph√π h·ª£p ƒë·ªÉ c·∫£i thi·ªán nƒÉng l·ª±c h·ªçc t·∫≠p");
            promptBuilder.AppendLine();

            // User's exam history
            promptBuilder.AppendLine("L·ªäCH S·ª¨ L√ÄM B√ÄI G·∫¶N NH·∫§T:");
            if (history.Any())
            {
                foreach (var h in history)
                {
                    promptBuilder.AppendLine($"- ƒêi·ªÉm: {h.Score}/100, ƒê√∫ng: {h.CorrectCount}/{h.TotalQuestions}, Th·ªùi gian: {h.TimeTaken}s, Ng√†y: {h.SubmittedAt:dd/MM/yyyy}");
                }
            }
            else
            {
                promptBuilder.AppendLine("- Ch∆∞a c√≥ l·ªãch s·ª≠ l√†m b√†i");
            }
            promptBuilder.AppendLine();

            // Available questions
            promptBuilder.AppendLine("DANH S√ÅCH C√ÇU H·ªéI C√ì S·∫¥N:");
            foreach (var q in questions.Take(100)) // Limit to first 100 questions for prompt size
            {
                promptBuilder.AppendLine($"ID: {q.Id} | N·ªôi dung: {q.Content} | ƒê·ªô kh√≥: {q.DifficultyLevel} | L·ªõp: {q.GradeName} | B√†i: {q.LessonName}");
            }
            promptBuilder.AppendLine();

            // Instructions
            promptBuilder.AppendLine("Y√äU C·∫¶U:");
            promptBuilder.AppendLine("1. Ph√¢n t√≠ch l·ªãch s·ª≠ l√†m b√†i ƒë·ªÉ x√°c ƒë·ªãnh ƒëi·ªÉm y·∫øu c·ªßa h·ªçc sinh");
            promptBuilder.AppendLine("2. Ch·ªçn c√¢u h·ªèi ph√π h·ª£p v·ªõi mode ƒë√£ ch·ªçn:");
            if (request.Mode == "review")
            {
                promptBuilder.AppendLine("   - ∆Øu ti√™n c√¢u h·ªèi ·ªü m·ª©c ƒë·ªô d·ªÖ-trung b√¨nh");
                promptBuilder.AppendLine("   - T·∫≠p trung v√†o ki·∫øn th·ª©c c∆° b·∫£n");
                promptBuilder.AppendLine("   - Gi√∫p h·ªçc sinh c·ªßng c·ªë ki·∫øn th·ª©c ƒë√£ h·ªçc");
            }
            else
            {
                promptBuilder.AppendLine("   - ∆Øu ti√™n c√¢u h·ªèi ·ªü m·ª©c ƒë·ªô trung b√¨nh-kh√≥");
                promptBuilder.AppendLine("   - Th√°ch th·ª©c h·ªçc sinh v·ªõi ki·∫øn th·ª©c n√¢ng cao");
                promptBuilder.AppendLine("   - Ph√°t tri·ªÉn t∆∞ duy ph√¢n t√≠ch v√† gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ");
            }
            promptBuilder.AppendLine("3. ƒê·∫£m b·∫£o ƒëa d·∫°ng v·ªÅ ƒë·ªô kh√≥ v√† ch·ªß ƒë·ªÅ");
            if (request.LessonIds == null || !request.LessonIds.Any())
            {
                promptBuilder.AppendLine("4. CH√ö √ù: LessonIds kh√¥ng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh - h√£y ch·ªçn c√¢u h·ªèi t·ª´ T·∫§T C·∫¢ c√°c b√†i h·ªçc trong kh·ªëi l·ªõp ƒë·ªÉ t·∫°o ƒë·ªÅ thi t·ªïng h·ª£p (ph√π h·ª£p cho thi h·ªçc k·ª≥)");
            }
            else
            {
                promptBuilder.AppendLine($"4. CH√ö √ù: LessonIds ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh [{string.Join(", ", request.LessonIds)}] - h√£y t·∫≠p trung ch·ªçn c√¢u h·ªèi t·ª´ c√°c b√†i h·ªçc c·ª• th·ªÉ n√†y");
            }
            promptBuilder.AppendLine("5. Tr·∫£ v·ªÅ K·∫æT QU·∫¢ D∆Ø·ªöI D·∫†NG JSON v·ªõi format sau:");
            promptBuilder.AppendLine();
            promptBuilder.AppendLine("```json");
            promptBuilder.AppendLine("{");
            promptBuilder.AppendLine("  \"selectedQuestions\": [");
            promptBuilder.AppendLine("    {");
            promptBuilder.AppendLine("      \"questionId\": 123,");
            promptBuilder.AppendLine("      \"reasoning\": \"L√Ω do ch·ªçn c√¢u h·ªèi n√†y d·ª±a tr√™n ph√¢n t√≠ch l·ªãch s·ª≠ h·ªçc t·∫≠p\"");
            promptBuilder.AppendLine("    }");
            promptBuilder.AppendLine("  ],");
            promptBuilder.AppendLine("  \"analysis\": \"Ph√¢n t√≠ch t·ªïng quan v·ªÅ nƒÉng l·ª±c h·ªçc sinh v√† l√Ω do ch·ªçn ƒë·ªÅ thi n√†y\"");
            promptBuilder.AppendLine("}");
            promptBuilder.AppendLine("```");

            return promptBuilder.ToString();
        }

        public async Task<string> CallOpenAIAsync(string prompt)
        {
            try
            {
                _logger.LogInformation("ü§ñ Starting OpenAI API call...");
                
                var apiKey = _configuration["OpenAI:ApiKey"];
                if (string.IsNullOrEmpty(apiKey))
                {
                    _logger.LogError("‚ùå OpenAI API key is not configured");
                    throw new InvalidOperationException("OpenAI API key is not configured");
                }

                _logger.LogInformation("üîë OpenAI API key found, length: {Length}", apiKey.Length);

                var requestBody = new
                {
                    model = "gpt-3.5-turbo",
                    messages = new[]
                    {
                        new { role = "user", content = prompt }
                    },
                    max_tokens = 1500,
                    temperature = 0.3
                };

                var json = JsonConvert.SerializeObject(requestBody);
                _logger.LogInformation("üì§ Request body size: {Size} characters", json.Length);
                _logger.LogInformation("üéØ Model: gpt-3.5-turbo, Max tokens: 1500, Temperature: 0.3");

                var content = new StringContent(json, Encoding.UTF8, "application/json");

                _httpClient.DefaultRequestHeaders.Clear();
                _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {apiKey}");

                _logger.LogInformation("üì° Sending request to OpenAI API...");
                var startTime = DateTime.UtcNow;
                var response = await _httpClient.PostAsync("https://api.openai.com/v1/chat/completions", content);
                var endTime = DateTime.UtcNow;
                var duration = (endTime - startTime).TotalSeconds;

                _logger.LogInformation("üì• Received response from OpenAI API. Status: {StatusCode}, Duration: {Duration}s", 
                    response.StatusCode, duration);

                if (!response.IsSuccessStatusCode)
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    _logger.LogError("‚ùå OpenAI API error response: {ErrorContent}", errorContent);
                    throw new HttpRequestException($"OpenAI API returned {response.StatusCode}. Error: {errorContent}");
                }

                var responseContent = await response.Content.ReadAsStringAsync();
                _logger.LogInformation("‚úÖ OpenAI API call successful. Response size: {Size} characters", responseContent.Length);

                var openAIResponse = JsonConvert.DeserializeObject<OpenAIResponse>(responseContent);
                var aiResponse = openAIResponse?.Choices?.FirstOrDefault()?.Message?.Content ?? string.Empty;

                if (string.IsNullOrEmpty(aiResponse))
                {
                    _logger.LogError("‚ùå Empty response from OpenAI API");
                    throw new InvalidOperationException("Empty response from OpenAI API");
                }

                _logger.LogInformation("üéâ Successfully extracted AI response. Length: {Length} characters", aiResponse.Length);
                return aiResponse;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error calling OpenAI API. Error: {ErrorMessage}", ex.Message);
                throw;
            }
        }

        public async Task<GenerateAIExamResponse> ParseAIResponseAsync(string aiResponse, GenerateAIExamRequest request)
        {
            try
            {
                _logger.LogInformation("üîç Starting AI response parsing...");
                _logger.LogInformation("üìÑ Input response length: {Length} characters", aiResponse.Length);

                // Extract JSON from AI response
                var jsonStart = aiResponse.IndexOf("{");
                var jsonEnd = aiResponse.LastIndexOf("}") + 1;
                
                _logger.LogInformation("üîç JSON extraction - Start: {Start}, End: {End}", jsonStart, jsonEnd);
                
                if (jsonStart == -1 || jsonEnd == 0)
                {
                    _logger.LogError("‚ùå Invalid AI response format - no JSON found");
                    throw new InvalidOperationException("Invalid AI response format");
                }

                var jsonContent = aiResponse.Substring(jsonStart, jsonEnd - jsonStart);
                _logger.LogInformation("üìù Extracted JSON content length: {Length} characters", jsonContent.Length);
                
                var aiResult = JsonConvert.DeserializeObject<AIResponse>(jsonContent);
                _logger.LogInformation("‚úÖ Successfully deserialized AI response");

                if (aiResult?.SelectedQuestions == null || !aiResult.SelectedQuestions.Any())
                {
                    _logger.LogError("‚ùå No questions selected by AI");
                    throw new InvalidOperationException("No questions selected by AI");
                }

                _logger.LogInformation("üéØ AI selected {Count} questions", aiResult.SelectedQuestions.Count);
                
                // Log AI analysis
                if (!string.IsNullOrEmpty(aiResult.Analysis))
                {
                    _logger.LogInformation("üß† AI Analysis: {Analysis}", aiResult.Analysis);
                }

                // Get full question details
                var selectedQuestionIds = aiResult.SelectedQuestions.Select(q => q.QuestionId).ToList();
                _logger.LogInformation("üìã Selected Question IDs: {QuestionIds}", string.Join(", ", selectedQuestionIds));
                
                var questions = new List<AIQuestionResponse>();
                var successCount = 0;
                var errorCount = 0;

                foreach (var selectedQuestion in aiResult.SelectedQuestions)
                {
                    try
                    {
                        _logger.LogInformation("üîç Processing question ID {QuestionId}...", selectedQuestion.QuestionId);
                        var questionDetail = await _questionsService.GetQuestionById(selectedQuestion.QuestionId);
                        
                        if (questionDetail != null)
                        {
                            var aiQuestion = new AIQuestionResponse
                            {
                                QuestionId = questionDetail.Id,
                                Content = questionDetail.Content,
                                DifficultyLevel = questionDetail.DifficultyLevelId.ToString(),
                                QuestionType = questionDetail.Type ?? "MULTIPLE_CHOICE",
                                Options = questionDetail.Options ?? new List<string>(),
                                CorrectAnswer = questionDetail.CorrectAnswer ?? "",
                                Explanation = questionDetail.Explanation ?? "",
                                Formula = questionDetail.Formula,
                                QuestionSource = questionDetail.QuestionSource,
                                GradeId = questionDetail.GradeId ?? 0,
                                GradeName = "", // Will be populated from Grade service if needed
                                LessonId = questionDetail.LessonId ?? 0,
                                LessonName = questionDetail.LessonName ?? "",
                                AIReasoning = selectedQuestion.Reasoning
                            };
                            questions.Add(aiQuestion);
                            successCount++;
                            _logger.LogInformation("‚úÖ Successfully processed question ID {QuestionId}", selectedQuestion.QuestionId);
                        }
                        else
                        {
                            errorCount++;
                            _logger.LogWarning("‚ö†Ô∏è Question ID {QuestionId} not found in database", selectedQuestion.QuestionId);
                        }
                    }
                    catch (Exception ex)
                    {
                        errorCount++;
                        _logger.LogError(ex, "‚ùå Error processing question ID {QuestionId}. Error: {ErrorMessage}", 
                            selectedQuestion.QuestionId, ex.Message);
                    }
                }

                _logger.LogInformation("üìä Question processing summary - Success: {SuccessCount}, Errors: {ErrorCount}", 
                    successCount, errorCount);

                // Calculate metadata
                var difficultyDistribution = questions
                    .GroupBy(q => q.DifficultyLevel)
                    .ToDictionary(g => g.Key, g => g.Count());

                var subjectDistribution = questions
                    .GroupBy(q => q.LessonName)
                    .ToDictionary(g => g.Key, g => g.Count());

                _logger.LogInformation("üéâ AI response parsing completed successfully. Generated {Count} questions", questions.Count);
                
                return new GenerateAIExamResponse
                {
                    Success = true,
                    Message = "ƒê·ªÅ thi ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng b·ªüi AI",
                    Questions = questions,
                    Metadata = new AIExamMetadata
                    {
                        TotalQuestions = questions.Count,
                        Mode = request.Mode,
                        UserId = request.UserId,
                        GeneratedAt = DateTime.UtcNow,
                        AIModel = "gpt-3.5-turbo",
                        TokensUsed = 0, // Would need to parse from OpenAI response
                        ProcessingTimeSeconds = 0,
                        Analysis = aiResult?.Analysis ?? string.Empty,
                        DifficultyDistribution = difficultyDistribution,
                        SubjectDistribution = subjectDistribution
                    }
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error parsing AI response. Error: {ErrorMessage}", ex.Message);
                throw;
            }
        }

        // Helper classes for OpenAI API
        private class OpenAIResponse
        {
            public List<Choice> Choices { get; set; } = new List<Choice>();
        }

        private class Choice
        {
            public Message Message { get; set; } = new Message();
        }

        private class Message
        {
            public string Content { get; set; } = string.Empty;
        }

        private class AIResponse
        {
            public List<SelectedQuestion> SelectedQuestions { get; set; } = new List<SelectedQuestion>();
            public string Analysis { get; set; } = string.Empty;
        }

        private class SelectedQuestion
        {
            public int QuestionId { get; set; }
            public string Reasoning { get; set; } = string.Empty;
        }

        // Save AI generated exam to database
        private async Task<int> SaveAIExamToDatabaseAsync(GenerateAIExamRequest request, GenerateAIExamResponse aiResult)
        {
            try
            {
                _logger.LogInformation("üíæ Saving AI generated exam to database for UserId: {UserId}", request.UserId);

                // Create exam
                var examRequest = new ExamRequest
                {
                    Name = $"AI Exam - {request.Mode} - {DateTime.UtcNow:dd/MM/yyyy HH:mm}",
                    Description = $"AI generated exam. Mode: {request.Mode}",
                    SubjectId = request.SubjectIds?.FirstOrDefault() ?? 1, // Use first subject or default
                    GradeId = request.GradeIds?.FirstOrDefault(),
                    LessonId = request.LessonIds?.FirstOrDefault(),
                    ExamTypeId = 1, // Default exam type
                    CreatedByUserId = request.UserId,
                    Duration = request.QuestionCount * 3 // 3 minutes per question
                };

                var examId = await _examService.CreateExamAsync(examRequest);
                _logger.LogInformation("‚úÖ Created exam with ID: {ExamId}", examId);

                // Add questions to exam
                foreach (var question in aiResult.Questions)
                {
                    await _unitOfWork.ExamQuestionRepository.AddAsync(new Repository.Models.ExamQuestion
                    {
                        ExamId = examId,
                        QuestionId = question.QuestionId,
                        CreatedAt = DateTime.UtcNow
                    });
                }

                await _unitOfWork.SaveChangesWithTransactionAsync();
                _logger.LogInformation("‚úÖ Added {Count} questions to exam {ExamId}", aiResult.Questions.Count, examId);

                return examId;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error saving AI exam to database. Error: {ErrorMessage}", ex.Message);
                return 0; // Return 0 if failed
            }
        }

        /// <summary>
        /// L·ªçc l·ªãch s·ª≠ thi theo y√™u c·∫ßu c·ªßa user ƒë·ªÉ AI ch·ªâ nh·∫≠n context li√™n quan
        /// </summary>
        private List<ExamHistoryMinimalResponse> FilterExamHistoryByRequest(
            List<ExamHistoryMinimalResponse> history, 
            GenerateAIExamRequest request)
        {
            if (history == null || !history.Any())
                return new List<ExamHistoryMinimalResponse>();

            var filtered = history.AsEnumerable();

            // L·ªçc theo SubjectIds (n·∫øu user ch·ªâ ƒë·ªãnh)
            if (request.SubjectIds != null && request.SubjectIds.Any())
            {
                filtered = filtered.Where(h => request.SubjectIds.Contains(h.SubjectId));
                _logger.LogInformation("üîç Filtered history by SubjectIds [{SubjectIds}]: {Count} records remain", 
                    string.Join(", ", request.SubjectIds), filtered.Count());
            }

            // L·ªçc theo GradeIds (n·∫øu user ch·ªâ ƒë·ªãnh)
            if (request.GradeIds != null && request.GradeIds.Any())
            {
                filtered = filtered.Where(h => h.GradeId.HasValue && request.GradeIds.Contains(h.GradeId.Value));
                _logger.LogInformation("üîç Filtered history by GradeIds [{GradeIds}]: {Count} records remain", 
                    string.Join(", ", request.GradeIds), filtered.Count());
            }

            // L·ªçc theo ChapterIds (n·∫øu user ch·ªâ ƒë·ªãnh)
            if (request.ChapterIds != null && request.ChapterIds.Any())
            {
                filtered = filtered.Where(h => h.ChapterId.HasValue && request.ChapterIds.Contains(h.ChapterId.Value));
                _logger.LogInformation("üîç Filtered history by ChapterIds [{ChapterIds}]: {Count} records remain", 
                    string.Join(", ", request.ChapterIds), filtered.Count());
            }

            // L·ªçc theo LessonIds (n·∫øu user ch·ªâ ƒë·ªãnh)
            if (request.LessonIds != null && request.LessonIds.Any())
            {
                filtered = filtered.Where(h => h.LessonId.HasValue && request.LessonIds.Contains(h.LessonId.Value));
                _logger.LogInformation("üîç Filtered history by LessonIds [{LessonIds}]: {Count} records remain", 
                    string.Join(", ", request.LessonIds), filtered.Count());
            }

            return filtered.ToList();
        }
    }
}
