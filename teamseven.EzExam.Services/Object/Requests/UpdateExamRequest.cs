using System.ComponentModel.DataAnnotations;

namespace teamseven.EzExam.Services.Object.Requests
{
    public class UpdateExamRequest
    {
        [Required(ErrorMessage = "ID is required")]
        [Range(1, int.MaxValue, ErrorMessage = "ID must be a positive number")]
        public int Id { get; set; }

        [Required(ErrorMessage = "Name is required")]
        [StringLength(200, ErrorMessage = "Name cannot exceed 200 characters")]
        public string Name { get; set; } = string.Empty;

        [StringLength(1000, ErrorMessage = "Description cannot exceed 1000 characters")]
        public string? Description { get; set; }

        [Required(ErrorMessage = "SubjectId is required")]
        [Range(1, int.MaxValue, ErrorMessage = "SubjectId must be a positive number")]
        public int SubjectId { get; set; }

        [Range(1, int.MaxValue, ErrorMessage = "LessonId must be a positive number")]
        public int? LessonId { get; set; }

        [Required(ErrorMessage = "ExamTypeId is required")]
        [Range(1, int.MaxValue, ErrorMessage = "ExamTypeId must be a positive number")]
        public int ExamTypeId { get; set; }

        [Range(1, int.MaxValue, ErrorMessage = "TimeLimit must be a positive number")]
        public int? TimeLimit { get; set; }

        [Range(0, int.MaxValue, ErrorMessage = "TotalQuestions must be a non-negative number")]
        public int? TotalQuestions { get; set; }

        [Range(0, int.MaxValue, ErrorMessage = "TotalMarks must be a non-negative number")]
        public int? TotalMarks { get; set; }

        [Range(1, int.MaxValue, ErrorMessage = "Duration must be a positive number")]
        public int? Duration { get; set; }

        [StringLength(2000, ErrorMessage = "TestConfiguration cannot exceed 2000 characters")]
        public string? TestConfiguration { get; set; }

        [StringLength(500, ErrorMessage = "DifficultyDistribution cannot exceed 500 characters")]
        public string? DifficultyDistribution { get; set; }

        [StringLength(1000, ErrorMessage = "TopicDistribution cannot exceed 1000 characters")]
        public string? TopicDistribution { get; set; }

        public bool? IsAutoGenerated { get; set; }

        [StringLength(50, ErrorMessage = "GenerationSource cannot exceed 50 characters")]
        public string? GenerationSource { get; set; }

        [Range(1, int.MaxValue, ErrorMessage = "AITestRecommendationId must be a positive number")]
        public int? AITestRecommendationId { get; set; }

        public bool? IsActive { get; set; }

        public bool? IsPublic { get; set; }
    }
}
